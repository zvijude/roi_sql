// Part -> QR & MainTask
// MainTask -> Part & Task
// Qr -> Part & Task
// Task -> MainTask & Qr
// Prob -> Task

model Qr {
  id     Int      @id @default(autoincrement())
  qrNum  Int
  prjId  Int
  status QrStatus @default(IN_PROGRESS)

  floor    Int
  aptNum   Int
  front    String?
  locInApt String
  loc      String? @default(dbgenerated())

  totalTasksCount     Int @default(0)
  totalTasksCompleted Int @default(0)

  tasks     Task[] @relation("tasks")
  scans     Scan[]
  part      Part   @relation(fields: [partId], references: [id])
  createdBy User   @relation(fields: [createdById], references: [id])

  partId      Int
  createdById Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([qrNum, prjId])
  @@index([qrNum, prjId])
}

model Task {
  id       Int         @id @default(autoincrement())
  kablanId Int?
  status   TaskStatus? // WAITING, SKIPPED, COMPLETED, null

  note  String?
  media String[]
  probs Prob[]

  qr        Qr       @relation("tasks", fields: [qrId], references: [id])
  mainTask  MainTask @relation(fields: [mainTaskId], references: [id])
  prj       Project  @relation(fields: [prjId], references: [id])
  createdBy User     @relation("createdBy", fields: [createdById], references: [id])
  resBy     User?    @relation(fields: [resById], references: [id])

  qrId        Int
  mainTaskId  Int
  prjId       Int
  createdById Int
  resById     Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Prob {
  id       Int        @id @default(autoincrement())
  type     ProbType
  price    Int        @default(0)
  kablanId Int?
  desc     String
  media    String[]
  status   ProbStatus @default(WAITING)

  task      Task    @relation(fields: [taskId], references: [id])
  createdBy User    @relation(fields: [createdById], references: [id], name: "reqBy")
  resBy     User?   @relation(fields: [resById], references: [id], name: "solvedBy")
  prj       Project @relation(fields: [prjId], references: [id])

  taskId      Int
  createdById Int
  resById     Int?
  prjId       Int

  resAt     DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Scan {
  id      Int     @id @default(autoincrement())
  qr      Qr      @relation(fields: [qrNum, prjId], references: [qrNum, prjId])
  user    User    @relation(fields: [userId], references: [id])
  project Project @relation(fields: [prjId], references: [id])

  kablanId Int?
  prjId    Int
  qrNum    Int
  userId   Int
  scanAt   DateTime @default(now())
}

enum QrStatus {
  FINISH
  IN_PROGRESS
  WAITING_TASK
  ON_PROB
  ON_BGT_REQ
}

enum TaskStatus {
  WAITING
  SKIPPED
  COMPLETED
}

enum ProbStatus {
  WAITING // both
  CANCELED // BgtReq

  SOLVED // Prob
  DENIED // BgtReq
  GRANTED // BgtReq
}

enum ProbType {
  PROB
  BGT_REQ
}
